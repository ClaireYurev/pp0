generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int        @id @default(autoincrement())
  userType              String     @db.VarChar(10)
  firstName             String?    @db.VarChar(255)
  lastName              String?    @db.VarChar(255)
  email                 String     @unique @db.VarChar(255)
  passwordHash          String?    @db.VarChar(255)
  googleId              String?    @unique @db.VarChar(255)
  googleEmail           String?    @db.VarChar(255)
  googleAvatarUrl       String?    @db.VarChar(255)
  subscriptionTier      String     @default("community") @db.VarChar(20)
  stripeCustomerId      String?    @db.VarChar(255)
  taxRate               Decimal    @default(0.00) @db.Decimal(5, 2)
  taxId                 String?    @db.VarChar(255)
  defaultCurrency       String     @default("USD") @db.VarChar(3)
  createdAt             DateTime   @default(now())
  briefs                Brief[]
  contractsAsClient     Contract[] @relation("ClientContracts")
  contractsAsFreelancer Contract[] @relation("FreelancerContracts")
  estimates             Estimate[]
  invoices              Invoice[]
  projectsAsClient      Project[]  @relation("ClientProjects")
  projectsAsFreelancer  Project[]  @relation("FreelancerProjects")
  proposals             Proposal[]
}

model Project {
  id                 Int        @id @default(autoincrement())
  freelancerId       Int
  clientId           Int
  projectName        String     @db.VarChar(255)
  projectDescription String?
  currency           String     @db.VarChar(3)
  status             String     @default("active") @db.VarChar(20)
  createdAt          DateTime   @default(now())
  briefs             Brief[]
  contracts          Contract[]
  estimates          Estimate[]
  invoices           Invoice[]
  client             User       @relation("ClientProjects", fields: [clientId], references: [id])
  freelancer         User       @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  proposals          Proposal[]
}

model Brief {
  id        Int        @id @default(autoincrement())
  projectId Int
  clientId  Int
  title     String     @db.VarChar(255)
  content   String
  createdAt DateTime   @default(now())
  client    User       @relation(fields: [clientId], references: [id])
  project   Project    @relation(fields: [projectId], references: [id])
  estimates Estimate[]
  proposals Proposal[]
}

model Proposal {
  id              Int               @id @default(autoincrement())
  projectId       Int
  freelancerId    Int
  briefId         Int?
  title           String            @db.VarChar(255)
  approach        String
  timeline        String
  deliverables    String
  pricingStrategy String            @db.VarChar(50)
  totalAmount     Decimal           @db.Decimal(10, 2)
  createdAt       DateTime          @default(now())
  contracts       Contract[]
  estimates       Estimate[]
  brief           Brief?            @relation(fields: [briefId], references: [id])
  freelancer      User              @relation(fields: [freelancerId], references: [id])
  project         Project           @relation(fields: [projectId], references: [id])
  versions        ProposalVersion[]
}

model ProposalVersion {
  id              Int      @id @default(autoincrement())
  proposalId      Int
  versionNumber   Int
  approach        String
  timeline        String
  deliverables    String
  pricingStrategy String   @db.VarChar(50)
  totalAmount     Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  proposal        Proposal @relation(fields: [proposalId], references: [id])
}

model Estimate {
  id           Int        @id @default(autoincrement())
  projectId    Int
  freelancerId Int
  briefId      Int?
  proposalId   Int?
  title        String     @db.VarChar(255)
  description  String
  totalAmount  Decimal    @db.Decimal(10, 2)
  paymentTerms String
  createdAt    DateTime   @default(now())
  contracts    Contract[]
  brief        Brief?     @relation(fields: [briefId], references: [id])
  freelancer   User       @relation(fields: [freelancerId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])
  proposal     Proposal?  @relation(fields: [proposalId], references: [id])
  invoices     Invoice[]
}

model Contract {
  id                   Int               @id @default(autoincrement())
  projectId            Int
  freelancerId         Int
  clientId             Int
  proposalId           Int?
  estimateId           Int?
  title                String            @db.VarChar(255)
  scopeOfWork          String
  paymentTerms         String
  timeline             String
  intellectualProperty String
  totalContractValue   Decimal           @db.Decimal(10, 2)
  digitalSignatureId   String?           @db.VarChar(255)
  status               String            @default("pending_signature") @db.VarChar(20)
  createdAt            DateTime          @default(now())
  changeOrders         ChangeOrder[]
  client               User              @relation("ClientContracts", fields: [clientId], references: [id])
  estimate             Estimate?         @relation(fields: [estimateId], references: [id])
  freelancer           User              @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  project              Project           @relation(fields: [projectId], references: [id])
  proposal             Proposal?         @relation(fields: [proposalId], references: [id])
  versions             ContractVersion[]
  invoices             Invoice[]
  milestones           Milestone[]
}

model ContractVersion {
  id                   Int      @id @default(autoincrement())
  contractId           Int
  versionNumber        Int
  scopeOfWork          String
  paymentTerms         String
  timeline             String
  intellectualProperty String
  totalContractValue   Decimal  @db.Decimal(10, 2)
  createdAt            DateTime @default(now())
  contract             Contract @relation(fields: [contractId], references: [id])
}

model Milestone {
  id          Int       @id @default(autoincrement())
  contractId  Int
  title       String    @db.VarChar(255)
  description String
  dueDate     DateTime
  amount      Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  invoices    Invoice[]
  contract    Contract  @relation(fields: [contractId], references: [id])
}

model Invoice {
  id             Int               @id @default(autoincrement())
  projectId      Int
  contractId     Int?
  estimateId     Int?
  milestoneId    Int?
  clientId       Int
  invoiceNumber  String            @unique @db.VarChar(50)
  issueDate      DateTime
  dueDate        DateTime
  subtotal       Decimal           @db.Decimal(10, 2)
  taxAmount      Decimal           @db.Decimal(10, 2)
  totalAmountDue Decimal           @db.Decimal(10, 2)
  amountPaid     Decimal           @default(0.00) @db.Decimal(10, 2)
  paymentStatus  String            @db.VarChar(20)
  createdAt      DateTime          @default(now())
  client         User              @relation(fields: [clientId], references: [id])
  contract       Contract?         @relation(fields: [contractId], references: [id])
  estimate       Estimate?         @relation(fields: [estimateId], references: [id])
  milestone      Milestone?        @relation(fields: [milestoneId], references: [id])
  project        Project           @relation(fields: [projectId], references: [id])
  lineItems      InvoiceLineItem[]
  receipts       Receipt[]
  refunds        Refund[]
}

model InvoiceLineItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

model Receipt {
  id             Int      @id @default(autoincrement())
  invoiceId      Int
  paymentDate    DateTime
  paymentMethod  String   @db.VarChar(50)
  amountReceived Decimal  @db.Decimal(10, 2)
  transactionId  String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  refunds        Refund[]
}

model Refund {
  id             Int      @id @default(autoincrement())
  invoiceId      Int
  receiptId      Int
  refundDate     DateTime
  amountRefunded Decimal  @db.Decimal(10, 2)
  reason         String
  transactionId  String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  receipt        Receipt  @relation(fields: [receiptId], references: [id])
}

model ChangeOrder {
  id                Int      @id @default(autoincrement())
  contractId        Int
  title             String   @db.VarChar(255)
  description       String
  revisedScope      String
  revisedTimeline   String
  revisedCostImpact Decimal  @db.Decimal(10, 2)
  createdAt         DateTime @default(now())
  contract          Contract @relation(fields: [contractId], references: [id])
}
