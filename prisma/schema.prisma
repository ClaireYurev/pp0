// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  freelancer
  client
  admin
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
}

model User {
  id                    String     @id @default(cuid())
  userType              UserType
  firstName             String?    @db.VarChar(255)
  lastName              String?    @db.VarChar(255)
  name                  String?
  email                 String     @unique @db.VarChar(255)
  emailVerified         DateTime?
  image                 String?
  passwordHash          String?    @db.VarChar(255)
  googleId              String?    @unique @db.VarChar(255)
  googleEmail           String?    @db.VarChar(255)
  googleAvatarUrl       String?    @db.VarChar(255)
  subscriptionTier      String     @default("community") @db.VarChar(20)
  stripeCustomerId      String?    @db.VarChar(255)
  taxRate               Decimal    @default(0.00) @db.Decimal(5, 2)
  taxId                 String?    @db.VarChar(255)
  defaultCurrency       String     @default("USD") @db.VarChar(3)
  createdAt             DateTime   @default(now())
  briefs                Brief[]
  contractsAsClient     Contract[] @relation("ClientContracts")
  contractsAsFreelancer Contract[] @relation("FreelancerContracts")
  estimates             Estimate[]
  projectsAsClient      Project[]  @relation("ClientProjects")
  projectsAsFreelancer  Project[]  @relation("FreelancerProjects")
  proposals             Proposal[]
  activities            Activity[]
  accounts              Account[]
  sessions              Session[]
  invoicesAsClient      Invoice[]  @relation("ClientInvoices")
  invoicesAsFreelancer  Invoice[]  @relation("FreelancerInvoices")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                 String     @id @default(cuid())
  freelancerId       String
  clientId           String
  projectName        String     @db.VarChar(255)
  projectDescription String?
  currency           String     @db.VarChar(3)
  status             ProjectStatus
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  briefs             Brief[]
  contracts          Contract[]
  estimates          Estimate[]
  invoices           Invoice[]
  client             User       @relation("ClientProjects", fields: [clientId], references: [id])
  freelancer         User       @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  proposals          Proposal[]
  activities         Activity[]
}

model Brief {
  id        String     @id @default(cuid())
  projectId String
  clientId  String
  title     String     @db.VarChar(255)
  content   String
  createdAt DateTime   @default(now())
  client    User       @relation(fields: [clientId], references: [id])
  project   Project    @relation(fields: [projectId], references: [id])
  estimates Estimate[]
  proposals Proposal[]
}

model Proposal {
  id              String            @id @default(cuid())
  projectId       String
  freelancerId    String
  briefId         String?
  title           String            @db.VarChar(255)
  approach        String
  timeline        String
  deliverables    String
  pricingStrategy String            @db.VarChar(50)
  totalAmount     Decimal           @db.Decimal(10, 2)
  createdAt       DateTime          @default(now())
  contracts       Contract[]
  estimates       Estimate[]
  brief           Brief?            @relation(fields: [briefId], references: [id])
  freelancer      User              @relation(fields: [freelancerId], references: [id])
  project         Project           @relation(fields: [projectId], references: [id])
  versions        ProposalVersion[]
}

model ProposalVersion {
  id              String   @id @default(cuid())
  proposalId      String
  versionNumber   Int
  approach        String
  timeline        String
  deliverables    String
  pricingStrategy String   @db.VarChar(50)
  totalAmount     Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  proposal        Proposal @relation(fields: [proposalId], references: [id])
}

model Estimate {
  id           String     @id @default(cuid())
  projectId    String
  freelancerId String
  briefId      String?
  proposalId   String?
  title        String     @db.VarChar(255)
  description  String
  totalAmount  Decimal    @db.Decimal(10, 2)
  paymentTerms String
  createdAt    DateTime   @default(now())
  contracts    Contract[]
  brief        Brief?     @relation(fields: [briefId], references: [id])
  freelancer   User       @relation(fields: [freelancerId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])
  proposal     Proposal?  @relation(fields: [proposalId], references: [id])
  invoices     Invoice[]
}

model Contract {
  id                   String            @id @default(cuid())
  projectId            String
  freelancerId         String
  clientId             String
  proposalId           String?
  estimateId           String?
  title                String            @db.VarChar(255)
  scopeOfWork          String
  paymentTerms         String
  timeline             String
  intellectualProperty String
  totalContractValue   Decimal           @db.Decimal(10, 2)
  digitalSignatureId   String?           @db.VarChar(255)
  status               String            @default("pending_signature") @db.VarChar(20)
  createdAt            DateTime          @default(now())
  changeOrders         ChangeOrder[]
  client               User              @relation("ClientContracts", fields: [clientId], references: [id])
  estimate             Estimate?         @relation(fields: [estimateId], references: [id])
  freelancer           User              @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  project              Project           @relation(fields: [projectId], references: [id])
  proposal             Proposal?         @relation(fields: [proposalId], references: [id])
  versions             ContractVersion[]
  invoices             Invoice[]
  milestones           Milestone[]
}

model ContractVersion {
  id                   String   @id @default(cuid())
  contractId           String
  versionNumber        Int
  scopeOfWork          String
  paymentTerms         String
  timeline             String
  intellectualProperty String
  totalContractValue   Decimal  @db.Decimal(10, 2)
  createdAt            DateTime @default(now())
  contract             Contract @relation(fields: [contractId], references: [id])
}

model Milestone {
  id          String    @id @default(cuid())
  contractId  String
  title       String    @db.VarChar(255)
  description String
  dueDate     DateTime
  amount      Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  invoices    Invoice[]
  contract    Contract  @relation(fields: [contractId], references: [id])
}

model Invoice {
  id             String            @id @default(cuid())
  projectId      String?
  contractId     String?
  estimateId     String?
  milestoneId    String?
  clientId       String
  freelancerId   String
  invoiceNumber  String            @unique @db.VarChar(50)
  issueDate      DateTime
  dueDate        DateTime
  subtotal       Decimal           @db.Decimal(10, 2)
  taxAmount      Decimal           @db.Decimal(10, 2)
  totalAmountDue Decimal           @db.Decimal(10, 2)
  amountPaid     Decimal           @default(0.00) @db.Decimal(10, 2)
  paymentStatus  String            @db.VarChar(20)
  clientEmail    String?
  description    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  client         User              @relation("ClientInvoices", fields: [clientId], references: [id])
  freelancer     User              @relation("FreelancerInvoices", fields: [freelancerId], references: [id])
  contract       Contract?         @relation(fields: [contractId], references: [id])
  estimate       Estimate?         @relation(fields: [estimateId], references: [id])
  milestone      Milestone?        @relation(fields: [milestoneId], references: [id])
  project        Project?          @relation(fields: [projectId], references: [id])
  lineItems      InvoiceLineItem[]
  receipts       Receipt[]
  refunds        Refund[]

  @@index([projectId])
  @@index([contractId])
  @@index([estimateId])
  @@index([milestoneId])
  @@index([clientId])
  @@index([freelancerId])
}

model InvoiceLineItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

model Receipt {
  id             String   @id @default(cuid())
  invoiceId      String
  paymentDate    DateTime
  paymentMethod  String   @db.VarChar(50)
  amountReceived Decimal  @db.Decimal(10, 2)
  transactionId  String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  refunds        Refund[]
}

model Refund {
  id             String   @id @default(cuid())
  invoiceId      String
  receiptId      String
  refundDate     DateTime
  amountRefunded Decimal  @db.Decimal(10, 2)
  reason         String
  transactionId  String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  receipt        Receipt  @relation(fields: [receiptId], references: [id])
}

model ChangeOrder {
  id                String   @id @default(cuid())
  contractId        String
  title             String   @db.VarChar(255)
  description       String
  revisedScope      String
  revisedTimeline   String
  revisedCostImpact Decimal  @db.Decimal(10, 2)
  createdAt         DateTime @default(now())
  contract          Contract @relation(fields: [contractId], references: [id])
}